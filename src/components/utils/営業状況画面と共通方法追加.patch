From 794110b62e54d89529cc6c6d8d6a4b63a13604fa Thu, 27 Aug 2020 14:24:43 +0900
From: kyou-ennbunn <794549097@qq.com>
Date: Mon, 24 Aug 2020 15:03:45 +0900
Subject: [PATCH] 営業状況画面と共通方法追加

diff --git a/src/components/manageSituation.js b/src/components/manageSituation.js
index 1f872eb..eca07f1 100644
--- a/src/components/manageSituation.js
+++ b/src/components/manageSituation.js
@@ -13,156 +13,47 @@
 		super(props);
 		this.state = this.initialState;//初期化
 	}
-
-	// レコードのステータス
-	formatType(cell) {
-		let ststeName = '';
-		if (cell === '0') {
-			ststeName = '';
-		} else if (cell === '1') {
-			ststeName = '提案のみ';
-		} else if (cell === '2') {
-			ststeName = '確定';
-		} else if (cell === '3') {
-			ststeName = '延長';
-		}
-		return ststeName;
-	}
-
-	// table編集
-	afterSaveCell = (row) => {
-		if (!(row.salesProgressCode === '2')) {
-			row.customer = '0';
-		}
+	//初期化
+	initialState = {
+		employeeNo: '',// 社員NO
+		yearMonth: new Date(new Date().getFullYear() + '/' + (new Date().getMonth() + 1 < 10 ? '0' + (new Date().getMonth() + 2) : (new Date().getMonth() + 2))).getTime(),
+		interviewDate1Show: '',　// 面接1日付
+		interviewDate1: '',　// 面接1日付
+		interviewDate2Show: '',　// 面接1日付
+		interviewDate2: '',　// 面接2日付
+		intreviewPalace1: '',　// 面接1場所
+		intreviewPalace2: '',　// 面接2場所
+		interviewCustomer1: '',　// 面接1客様
+		interviewCustomer2: '',　// 面接2客様
+		hopeLowestPrice: '',　// 希望単価min
+		hopeHighestPrice: '',　// 希望単価max
+		remark: '',　// 備考
+		salesSituationLists: [],// 明細
+		readFlag: true,// readonlyflag
+		style: {
+			"color": ""
+		},// 単価エラー色
+		salesProgressCodes: [],// ステータス
+		allCustomer: [],// お客様レコード用
+		editFlag: false,// 確定客様編集flag
+		updateBtnflag: false,//　レコード選択flag
+		salesYearAndMonth: new Date().getFullYear() + (new Date().getMonth() + 1 < 10 ? '0' + (new Date().getMonth() + 2) : (new Date().getMonth() + 2)),// 終わり年月
+		updateUser: sessionStorage.getItem('employeeName'),//更新者
+		salesPriorityStatus: '',// 優先度
+		regexp: /^[0-9\b]+$/,// 数字正則式
+		salesStaff: '',// 営業担当
+		salesPriorityStatuss: [],// 全部ステータス
+		salesPersons: [],// 全部営業
+		customers: [],// 全部お客様　画面入力用
+		getstations: [], // 全部場所
 	};
 
-	formatCustome(cell) {
-		let ststeName = '';
-		if (cell === '0') {
-			ststeName = '';
-		} else if (cell === '1') {
-			ststeName = 'MIZUHO';
-		} else if (cell === '2') {
-			ststeName = 'LENOVO';
-		} else if (cell === '3') {
-			ststeName = 'SONY';
-		}
-		return ststeName;
-	}
-
-	// 行番号
-	indexN(cell, row, enumObject, index) {
-		return (<div>{index + 1}</div>);
-	}
-
-	showPriority(cell, row, enumObject, index) {
-		if (row.salesPriorityStatus === '1') {
-			return (<div>{row.employeeNo}<font color="red">★</font></div>);
-		} else {
-			return (<div>{row.employeeNo}</div>);
-		}
-	}
-
-	// 更新ボタン
-	changeState = () => {
-		if (this.state.readFlag) {
-			if (!this.state.updateBtnflag) {
-				alert("エラーメッセージ");
-			} else {
-				this.setState({
-					readFlag: !this.state.readFlag,
-					readOnlyColorId: 'datePicker2',
-				})
-			}
-		} else {
-			if (this.state.hopeLowestPrice > this.state.hopeHighestPrice) {
-				this.setState({
-					style: {
-						"color": "red"
-					},
-				})
-				alert("エラーメッセージはMSG009")
-			} else {
-				alert(this.state.interviewDate1);
-				alert(this.state.interviewDate1Show);
-				alert(this.state.salesYearAndMonth);
-				axios.post("http://127.0.0.1:8080/salesSituation/updateSalesSituation", this.state)
-					.then(result => {
-						if (result.data != null) {
-							this.getSalesSituation(this.state.salesYearAndMonth)
-							this.setState({
-								style: {
-									"color": ""
-								},
-								readFlag: !this.state.readFlag,
-								readOnlyColorId: 'datePickerReadonly',
-								updateBtnflag: !this.state.updateBtnflag,
-								salesPriorityStatus: ''
-							})
-							/* window.location.reload(); */
-						} else {
-							alert("FAIL");
-						}
-					})
-					.catch(function (error) {
-						alert("ERR");
-					});
-			}
-		}
-	}
-
-	//onchange
-	valueChange = event => {
-		console.log(event)
-		this.setState({
-			[event.target.name]: event.target.value,
-		})
-	}
-
-	// numbre only
-	valueChangeNUmberOnly = event => {
-		console.log(event)
-		if (event.target.value === '' || this.state.regexp.test(event.target.value)) {
-			this.setState({
-				[event.target.name]: event.target.value,
-			})
-		} else {
-			alert("ONLY NUMBER");
-		}
-	}
-
-	// 年月変更後、レコ＾ド再取る
-	setEndDate = (date) => {
-		this.setState({
-			yearMonth: date,
-			salesYearAndMonth: publicUtils.formateDate(date, false),
-			initFlag: false
-		});
-		let searchYearMonth = date.getFullYear() + '' + (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : (date.getMonth() + 1));
-		this.getSalesSituation(searchYearMonth)
-	}
-
-	// setinterviewDate1
-	setinterviewDate1 = (date) => {
-		this.setState({
-			interviewDate1Show: date,
-			interviewDate1: this.timeToStr(date)
-		});
-	}
-
-	// setinterviewDate2
-	setinterviewDate2 = (date) => {
-		this.setState({
-			interviewDate2Show: date,
-			interviewDate2: this.timeToStr(date)
-		});
-	}
-
 	// 初期表示のレコードを取る
 	componentDidMount() {
 		let sysYearMonth = new Date();
 		let searchYearMonth = sysYearMonth.getFullYear() + (sysYearMonth.getMonth() + 1 < 10 ? '0' + (sysYearMonth.getMonth() + 2) : (sysYearMonth.getMonth() + 2));
-		this.getSalesSituation(searchYearMonth)
+		this.getSalesSituation(searchYearMonth);
+		this.getDropDowns();
 	}
 
 	// レコードを取る
@@ -184,10 +75,12 @@
 						hopeHighestPrice: '',　// 希望単価max
 						remark: '',　// 備考 
 						salesPriorityStatus: '',
+						style: {
+									"color": ""
+								},
+						readFlag: true,
+						updateBtnflag: false,
 					});
-					/* if(!this.state.initFlag){
-						window.location.reload();
-					} */
 				} else {
 					alert("FAIL");
 				}
@@ -197,84 +90,217 @@
 			});
 	}
 
-	// yyyy/mm/dd hh:mm→yyyymmddhhmm
-	timeToStr = (date) => {
-		if (date !== undefined && date !== null && date !== "") {
-			function addDateZero(num) {
-				return (num < 10 ? "0" + num : num);
+	getDropDowns = () => {
+		var methodArray = ["getSalesPriorityStatus","getCustomer", "getStation"]
+		var data = publicUtils.getPublicDropDown(methodArray);
+		data[1].shift();
+		data[1].unshift({ value: '', label: '選択ください' })
+		this.setState(
+			{
+				salesPriorityStatuss: data[0],//　営業優先度 
+				customers: data[1],//　お客様
+				getstations: data[2],//　 場所 
 			}
-			let d = new Date(date);
-			return d.getFullYear() + '' + addDateZero(d.getMonth() + 1) + '' + addDateZero(d.getDate()) + '' +
-				addDateZero(d.getHours()) + '' + addDateZero(d.getMinutes());
-		} else {
-			return "";
+		);
+		// レコードdropdown用
+		var methodArrayTleOnly = ["getSalesStatus", "getSalesPerson", "getCustomer"]
+		var dataTleOnly = publicUtils.getPublicDropDownRtBtSpTleOnly(methodArrayTleOnly);
+		dataTleOnly[2].shift();
+		dataTleOnly[2].unshift({ value: '', text: '選択ください' })
+		this.setState(
+			{
+				salesProgressCodes: dataTleOnly[0],//　営業状態
+				salesPersons: dataTleOnly[1],//　 営業担当 
+				allCustomer: dataTleOnly[2],//　お客様
+			}
+		);
+	};
+
+	// レコードのステータス
+	formatType(cell) {
+		var statuss = this.state.salesProgressCodes;
+		for (var i in statuss) {
+			if (cell === statuss[i].value) {
+			return statuss[i].text;
+			} 
+		}
+	}
+
+	// レコードおきゃく表示
+	formatCustome(cell) {
+		var allCustomers = this.state.allCustomer;
+ 		for (var i in allCustomers) {
+			if (cell === allCustomers[i].value) {
+			return allCustomers[i].text;
+			} 
+		} 
+	}
+
+	// レコードおきゃく表示
+	formatStaff(cell) {
+		var salesPersons = this.state.salesPersons;
+ 		for (var i in salesPersons) {
+			if (cell === salesPersons[i].value) {
+			return salesPersons[i].text;
+			} 
+		} 
+	}
+
+	// table編集保存
+	afterSaveCell = (row) => {
+		if (!(row.salesProgressCode === '2')) {
+			row.customer = '0';
 		}
 	};
 
-	// yyyymmddhhmm→yyyy/mm/dd hh:mm
-	formatTime = (datetime) => {
-		if (datetime !== undefined && datetime !== null && datetime !== "") {
-			var pattern = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/;
-			return datetime.replace(pattern, '$1/$2/$3 $4:$5');
-		} else {
-			return "";
-		}
-	};
+	// 行番号
+	indexN(cell, row, enumObject, index) {
+		return (<div>{index + 1}</div>);
+	}
 
-	//初期化
-	initialState = {
-		employeeNo: '',// 社員NO
-		yearMonth: new Date(new Date().getFullYear() + '/' + (new Date().getMonth() + 1 < 10 ? '0' + (new Date().getMonth() + 2) : (new Date().getMonth() + 2))).getTime(),
-		interviewDate1Show: '',　// 面接1日付
-		interviewDate1: '',　// 面接1日付
-		interviewDate2Show: '',　// 面接1日付
-		interviewDate2: '',　// 面接2日付
-		intreviewPalace1: '',　// 面接1場所
-		intreviewPalace2: '',　// 面接2場所
-		interviewCustomer1: '',　// 面接1客様
-		interviewCustomer2: '',　// 面接2客様
-		hopeLowestPrice: '',　// 希望単価min
-		hopeHighestPrice: '',　// 希望単価max
-		remark: '',　// 備考
-		salesSituationLists: [],// 明細
-		readFlag: true,// readflag
-		style: {
-			"color": ""
-		},
-		salesProgressCodes: [{ value: 0, text: ' ' }, { value: 1, text: '提案のみ' }, { value: 2, text: '確定' }, { value: 3, text: '延長' }],// ステータス
-		allCustomer: [{ value: 0, text: ' ' }, { value: 1, text: 'MIZUHO' }, { value: 2, text: 'LENOVO' }, { value: 3, text: 'SONY' }],// ステータス
-		editFlag: false,
-		readOnlyColorId: 'datePickerReadonly',
-		updateBtnflag: false,
-		salesYearAndMonth: new Date().getFullYear() + (new Date().getMonth() + 1 < 10 ? '0' + (new Date().getMonth() + 2) : (new Date().getMonth() + 2)),
-		updateUser: sessionStorage.getItem('employeeName'),//更新者
-		salesPriorityStatus: '',
-		initFlag: true,
-		regexp: /^[0-9\b]+$/,
-		salesStaff: ''
-	};
+	// 優先度表示
+	showPriority(cell, row, enumObject, index) {
+		if (row.salesPriorityStatus === '1') {
+			return (<div>{row.employeeNo}<font color="red">★</font></div>);
+		} else {
+			return (<div>{row.employeeNo}</div>);
+		}
+	}
+
+	// 更新ボタン
+	changeState = () => {
+		if (this.state.readFlag) {
+			if (!this.state.updateBtnflag) {
+				alert("エラーメッセージ");
+			} else {
+				this.setState({
+					readFlag: !this.state.readFlag,
+				})
+			}
+		} else {
+			if (this.state.hopeLowestPrice > this.state.hopeHighestPrice) {
+				this.setState({
+					style: {
+						"color": "red"
+					},
+				})
+				alert("エラーメッセージはMSG009")
+			} else {
+				/* alert(this.state.interviewDate1);
+				alert(this.state.interviewDate1Show);
+				alert(this.state.salesYearAndMonth); */
+				axios.post("http://127.0.0.1:8080/salesSituation/updateSalesSituation", this.state)
+					.then(result => {
+						if (result.data != null) {
+							this.getSalesSituation(this.state.salesYearAndMonth)
+						} else {
+							alert("FAIL");
+						}
+					})
+					.catch(function (error) {
+						alert("ERR");
+					});
+			}
+		}
+	}
+
+	//onchange
+	valueChange = event => {
+		this.setState({
+			[event.target.name]: event.target.value,
+		})
+	}
+
+	// numbre only
+	valueChangeNUmberOnly = event => {
+		if (event.target.value === '' || this.state.regexp.test(event.target.value)) {
+			this.setState({
+				[event.target.name]: event.target.value,
+			})
+		} else {
+			alert("ONLY NUMBER");
+		}
+	}
+
+	// 年月変更後、レコ＾ド再取る
+	setEndDate = (date) => {
+		this.setState({
+			yearMonth: date,
+			salesYearAndMonth: publicUtils.formateDate(date, false),
+		});
+		let searchYearMonth = date.getFullYear() + '' + (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : (date.getMonth() + 1));
+		this.getSalesSituation(searchYearMonth)
+	}
+
+	// setinterviewDate1
+	setinterviewDate1 = (date) => {
+		this.setState({
+			interviewDate1Show: date,
+			interviewDate1: publicUtils.timeToStr(date)
+		});
+	}
+
+	// setinterviewDate2
+	setinterviewDate2 = (date) => {
+		this.setState({
+			interviewDate2Show: date,
+			interviewDate2: publicUtils.timeToStr(date)
+		});
+	}
 
 	// レコードselect事件
 	handleRowSelect = (row, isSelected, e) => {
-		this.setState({
-			employeeNo: row.employeeNo === null ? '' : row.employeeNo,
-			interviewDate1: row.interviewDate1 === null ? '' : row.interviewDate1,
-			interviewDate1Show: row.interviewDate1 === null ? '' : new Date(this.formatTime(row.interviewDate1)).getTime(),
-			interviewDate2: row.interviewDate2 === null ? '' : row.interviewDate2,
-			interviewDate2Show: row.interviewDate2 === null ? '' : new Date(this.formatTime(row.interviewDate2)).getTime(),
-			intreviewPalace1: row.interviewLocation1 === null ? '' : row.interviewLocation1,
-			intreviewPalace2: row.interviewLocation2 === null ? '' : row.interviewLocation2,
-			interviewCustomer1: row.interviewCustomer1 === null ? '' : row.interviewCustomer1,
-			interviewCustomer2: row.interviewCustomer2 === null ? '' : row.interviewCustomer2,
-			hopeLowestPrice: row.hopeLowestPrice === null ? '' : row.hopeLowestPrice,
-			hopeHighestPrice: row.hopeHighestPrice === null ? '' : row.hopeHighestPrice,
-			salesPriorityStatus: row.salesPriorityStatus === null ? '' : row.salesPriorityStatus,
-			salesProgressCode: row.salesProgressCode === null ? '' : row.salesProgressCode,
-			remark: row.remark === null ? '' : row.remark,
-			editFlag: row.salesProgressCode === '2' ? { type: 'select', readOnly: false, options: { values: this.state.allCustomer } } : false,
-			updateBtnflag: true,
-			salesStaff: row.salesStaff === null ? '' : row.salesStaff,
-		});
+		if(isSelected){
+			this.setState({
+				employeeNo: row.employeeNo === null ? '' : row.employeeNo,
+				interviewDate1: row.interviewDate1 === null ? '' : row.interviewDate1,
+				interviewDate1Show: row.interviewDate1 === null ? '' : new Date(publicUtils.strToTime(row.interviewDate1)).getTime(),
+				interviewDate2: row.interviewDate2 === null ? '' : row.interviewDate2,
+				interviewDate2Show: row.interviewDate2 === null ? '' : new Date(publicUtils.strToTime(row.interviewDate2)).getTime(),
+				intreviewPalace1: row.interviewLocation1 === null ? '' : row.interviewLocation1,
+				intreviewPalace2: row.interviewLocation2 === null ? '' : row.interviewLocation2,
+				interviewCustomer1: row.interviewCustomer1 === null ? '' : row.interviewCustomer1,
+				interviewCustomer2: row.interviewCustomer2 === null ? '' : row.interviewCustomer2,
+				hopeLowestPrice: row.hopeLowestPrice === null ? '' : row.hopeLowestPrice,
+				hopeHighestPrice: row.hopeHighestPrice === null ? '' : row.hopeHighestPrice,
+				salesPriorityStatus: row.salesPriorityStatus === null ? '' : row.salesPriorityStatus,
+				salesProgressCode: row.salesProgressCode === null ? '' : row.salesProgressCode,
+				remark: row.remark === null ? '' : row.remark,
+				editFlag: row.salesProgressCode === '2' ? { type: 'select', readOnly: false, options: { values: this.state.allCustomer } } : false,
+				updateBtnflag: isSelected,
+				salesStaff: row.salesStaff === null ? '' : row.salesStaff,
+				readFlag:row.employeeNo===this.state.employeeNo && !this.state.readFlag ? false:true, 
+			});
+		}else{
+			this.setState({
+				employeeNo:'',
+				interviewDate1:'',
+				interviewDate1Show:'',
+				interviewDate2:'',
+				interviewDate2Show:'',
+				intreviewPalace1:'',
+				intreviewPalace2:'',
+				interviewCustomer1:'',
+				interviewCustomer2:'',
+				hopeLowestPrice:'',
+				hopeHighestPrice:'',
+				salesPriorityStatus:'',
+				salesProgressCode:'',
+				remark:'',
+				editFlag: row.salesProgressCode === '2' ? { type: 'select', readOnly: false, options: { values: this.state.allCustomer } } : false,
+				updateBtnflag: isSelected,
+				salesStaff: row.salesStaff === null ? '' : row.salesStaff,
+				readFlag:true, 
+			});			
+		}
+	}
+
+	renderShowsTotal=(start, to, total) => { 
+		return (
+			<p style={{ color: 'dark', "float": "left", "display": total > 0 ? "block" : "none" }}  >
+				{start}から  {to}まで , 総計{total}
+			</p>
+		);
 	}
 
 	render() {
@@ -296,12 +322,19 @@
 		const cellEdit = {
 			mode: 'click',
 			blurToSave: true,
-			bgColor: 'pink',
 			afterSaveCell: this.afterSaveCell,
 		}
 
 		const options = {
-
+			defaultSortOrder: 'dsc',
+			sizePerPage: 5,
+			pageStartIndex: 1,
+			paginationSize: 2,
+			prePage: 'Prev',
+			nextPage: 'Next',
+			hideSizePerPage: true,
+			alwaysShowAllBtns: true,
+			paginationShowsTotal: this.renderShowsTotal,
 		};
 
 		return (
@@ -326,8 +359,10 @@
 										<DatePicker
 											selected={this.state.yearMonth}
 											onChange={this.setEndDate}
-											autoComplete="on"
+											autoComplete="off"
 											locale="ja"
+											showMonthYearPicker
+											showFullMonthYearPicker
 											className="form-control form-control-sm"
 											dateFormat="yyyy/MM"
 											id="datePicker"
@@ -355,13 +390,13 @@
 										<DatePicker
 											selected={this.state.interviewDate1Show}
 											onChange={this.setinterviewDate1}
-											autoComplete="on"
+											autoComplete="off"
 											locale="ja"
 											showTimeSelect
 											className="form-control form-control-sm"
 											dateFormat="MM/dd HH:mm"
 											minDate={new Date()}
-											id={this.state.readOnlyColorId}
+											id={this.state.readFlag ?'datePickerReadonly':'datePicker2'}
 											readOnly={this.state.readFlag}
 										/>
 									</InputGroup.Append>
@@ -372,8 +407,16 @@
 									<InputGroup.Prepend>
 										<InputGroup.Text id="inputGroup-sizing-sm">場所</InputGroup.Text>
 									</InputGroup.Prepend>
-									<FormControl value={this.state.intreviewPalace1} autoComplete="off"
-										onChange={this.valueChange} size="sm" name="intreviewPalace1" maxLength="3" readOnly={this.state.readFlag} />
+									<Form.Control as="select" size="sm"
+										onChange={this.valueChange}
+										name="intreviewPalace1" value={this.state.intreviewPalace1}
+										autoComplete="off" disabled={this.state.readFlag}>
+										{this.state.getstations.map(date =>
+											<option key={date.code} value={date.code}>
+												{date.name}
+											</option>
+										)}
+									</Form.Control>
 								</InputGroup>
 							</Col>
 							<Col sm={2}>
@@ -381,8 +424,16 @@
 									<InputGroup.Prepend>
 										<InputGroup.Text id="inputGroup-sizing-sm">お客様</InputGroup.Text>
 									</InputGroup.Prepend>
-									<FormControl value={this.state.interviewCustomer1} autoComplete="off"
-										onChange={this.valueChange} size="sm" maxLength="3" name="interviewCustomer1" readOnly={this.state.readFlag} />
+									<Form.Control as="select" size="sm"
+										onChange={this.valueChange}
+										name="interviewCustomer1" value={this.state.interviewCustomer1}
+										autoComplete="off" disabled={this.state.readFlag}>
+										{this.state.customers.map(date =>
+											<option key={date.value} value={date.value}>
+												{date.label}
+											</option>
+										)}
+									</Form.Control>
 								</InputGroup>
 							</Col>
 							<Col sm={2}>
@@ -394,13 +445,13 @@
 										<DatePicker
 											selected={this.state.interviewDate2Show}
 											onChange={this.setinterviewDate2}
-											autoComplete="on"
+											autoComplete="off"
 											locale="ja"
 											showTimeSelect
 											className="form-control form-control-sm"
 											dateFormat="MM/dd HH:mm"
 											minDate={new Date()}
-											id={this.state.readOnlyColorId}
+											id={this.state.readFlag ?'datePickerReadonly':'datePicker2'}
 											readOnly={this.state.readFlag}
 										/>
 									</InputGroup.Append>
@@ -411,17 +462,33 @@
 									<InputGroup.Prepend>
 										<InputGroup.Text id="inputGroup-sizing-sm">場所</InputGroup.Text>
 									</InputGroup.Prepend>
-									<FormControl value={this.state.intreviewPalace2} autoComplete="off"
-										onChange={this.valueChange} size="sm" name="intreviewPalace2" maxLength="3" readOnly={this.state.readFlag} />
-								</InputGroup>
+									<Form.Control as="select" size="sm"
+										onChange={this.valueChange}
+										name="intreviewPalace2" value={this.state.intreviewPalace2}
+										autoComplete="off" disabled={this.state.readFlag}>
+										{this.state.getstations.map(date =>
+											<option key={date.code} value={date.code}>
+												{date.name}
+											</option>
+										)}
+									</Form.Control>
+									</InputGroup>
 							</Col>
 							<Col sm={2}>
 								<InputGroup size="sm" className="mb-3">
 									<InputGroup.Prepend>
 										<InputGroup.Text id="inputGroup-sizing-sm">お客様</InputGroup.Text>
 									</InputGroup.Prepend>
-									<FormControl value={this.state.interviewCustomer2} autoComplete="off"
-										onChange={this.valueChange} size="sm" maxLength="3" name="interviewCustomer2" readOnly={this.state.readFlag} />
+									<Form.Control as="select" size="sm"
+										onChange={this.valueChange}
+										name="interviewCustomer2" value={this.state.interviewCustomer2}
+										autoComplete="off" disabled={this.state.readFlag}>
+										{this.state.customers.map(date =>
+											<option key={date.value} value={date.value}>
+												{date.label}
+											</option>
+										)}
+									</Form.Control>
 								</InputGroup>
 							</Col>
 						</Row>
@@ -443,8 +510,16 @@
 									<InputGroup.Prepend>
 										<InputGroup.Text id="inputGroup-sizing-sm">優先度</InputGroup.Text>
 									</InputGroup.Prepend>
-									<FormControl value={this.state.salesPriorityStatus} autoComplete="off" name="salesPriorityStatus"
-										onChange={this.valueChange} size="sm" maxLength="3" readOnly={this.state.readFlag} />
+									<Form.Control as="select" size="sm"
+										onChange={this.valueChange}
+										name="salesPriorityStatus" value={this.state.salesPriorityStatus}
+										autoComplete="off" disabled={this.state.readFlag}>
+										{this.state.salesPriorityStatuss.map(date =>
+											<option key={date.code} value={date.code}>
+												{date.name}
+											</option>
+										)}
+									</Form.Control>
 								</InputGroup>
 							</Col>
 							<Col sm={6}>
@@ -463,29 +538,6 @@
 					</div>
 
 					<Row>
-						{/* 	var total=this.state.salesSituationLists.length;
-					var decided = 0;
-					if (total!===0) {
-						this.state.salesSituationLists.map((item, index) => (
-								if(item.salesProgressCode===1){
-									decided=decided+1
-								} 
-						))
-						<Col sm={1}>
-							<font style={{ whiteSpace: 'nowrap' }}>合計：人</font>
-						</Col>
-						<Col sm={1}>
-							<font style={{ whiteSpace: 'nowrap' }}>確定：0人</font>
-						</Col>
-					}else{
-						<Col sm={1}>
-							<font style={{ whiteSpace: 'nowrap' }}>合計：0人</font>
-						</Col>
-						<Col sm={1}>
-							<font style={{ whiteSpace: 'nowrap' }}>確定：0人</font>
-						</Col>
-
-					} */}
 						<Col sm={1}>
 							<font style={{ whiteSpace: 'nowrap' }}>合計：1人</font>
 						</Col>
@@ -509,6 +561,7 @@
 						className={"bg-white text-dark"}
 						data={this.state.salesSituationLists}
 						pagination
+						options={options}
 						selectRow={selectRow}
 						cellEdit={cellEdit}
 						trClassName={this.rowClassNameFormat}>
@@ -520,9 +573,9 @@
 						<TableHeaderColumn width='7%' dataField='nearestStation' editable={false}>寄り駅</TableHeaderColumn>
 						<TableHeaderColumn width='5%' dataField='unitPrice' editable={false}>単価</TableHeaderColumn>
 						<TableHeaderColumn width='10%' dataField='salesProgressCode' dataFormat={this.formatType.bind(this)} editable={{ type: 'select', options: { values: this.state.salesProgressCodes } }} >ステータス</TableHeaderColumn>
-						<TableHeaderColumn width='8%' dataField='customer' dataFormat={this.formatCustome} editable={this.state.editFlag}>確定客様</TableHeaderColumn>
+						<TableHeaderColumn width='8%' dataField='customer' dataFormat={this.formatCustome.bind(this)} editable={this.state.editFlag}>確定客様</TableHeaderColumn>
 						<TableHeaderColumn width='8%' dataField='price' >確定単価</TableHeaderColumn>
-						<TableHeaderColumn width='8%' dataField='salesStaff' >営業担当</TableHeaderColumn>
+						<TableHeaderColumn width='8%' dataField='salesStaff' dataFormat={this.formatStaff.bind(this)} editable={{ type: 'select', options: { values: this.state.salesPersons } }}>営業担当</TableHeaderColumn>
 						<TableHeaderColumn dataField='interviewDate1' hidden={true}>面接1日付</TableHeaderColumn>
 						<TableHeaderColumn dataField='interviewLocation1' hidden={true}>面接1場所</TableHeaderColumn>
 						<TableHeaderColumn dataField='interviewCustomer1' hidden={true}>面接1客様</TableHeaderColumn>
@@ -532,7 +585,7 @@
 						<TableHeaderColumn dataField='hopeLowestPrice' hidden={true}>希望単価min</TableHeaderColumn>
 						<TableHeaderColumn dataField='hopeHighestPrice' hidden={true}>希望単価max</TableHeaderColumn>
 						<TableHeaderColumn dataField='remark' hidden={true}>備考</TableHeaderColumn>
-						<TableHeaderColumn dataField='salesPriorityStatus' hidden={true}>営業担当</TableHeaderColumn>
+						<TableHeaderColumn dataField='salesPriorityStatus' hidden={true}>優先度</TableHeaderColumn>
 					</BootstrapTable>
 				</div>
 			</div>
diff --git a/src/components/utils/publicUtils.js b/src/components/utils/publicUtils.js
index 5c2baae..ef03034 100644
--- a/src/components/utils/publicUtils.js
+++ b/src/components/utils/publicUtils.js
@@ -92,6 +92,32 @@
 	return outArray;
 }
 
+//　ドロップダウン  多くメソッド react-bootstrap-table---->select専用
+export function getPublicDropDownRtBtSpTleOnly(methodArray) {
+	var outArray = [];
+	for (var i = 0; i < methodArray.length; i++) {
+		$.ajax({
+			type: "POST",
+			url: "http://127.0.0.1:8080/" + methodArray[i],
+			async: false,
+			success: function (msg) {
+				var array = [{ value: '', text: '選択ください' }];
+					for (var k in msg) {
+					    var arrayDetail1 = { value: '', text:''}
+						if(msg[k].code!==null){
+							arrayDetail1 = { value: msg[k].code, text:msg[k].name}
+						}else{
+							arrayDetail1 = { value: msg[k].value, text:msg[k].label}
+						}
+						array.push(arrayDetail1)
+					}
+				outArray.push(array);
+			}
+		});
+	}
+	return outArray;
+}
+
 //　採番番号
 export async function getNO(columnName, typeName, table) {
 	var no;
@@ -192,3 +218,27 @@
 
 }
 
+// yyyy/mm/dd hh:mm→yyyymmddhhmm
+export function timeToStr(date) {
+	if (date !== undefined && date !== null && date !== "") {
+		function addDateZero(num) {
+			return (num < 10 ? "0" + num : num);
+		}
+		let d = new Date(date);
+		return d.getFullYear() + '' + addDateZero(d.getMonth() + 1) + '' + addDateZero(d.getDate()) + '' +
+			addDateZero(d.getHours()) + '' + addDateZero(d.getMinutes());
+	} else {
+		return "";
+	}
+};
+
+// yyyymmddhhmm→yyyy/mm/dd hh:mm
+export function strToTime(datetime) {
+	if (datetime !== undefined && datetime !== null && datetime !== "") {
+		var pattern = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/;
+		return datetime.replace(pattern, '$1/$2/$3 $4:$5');
+	} else {
+		return "";
+	}
+};
+
